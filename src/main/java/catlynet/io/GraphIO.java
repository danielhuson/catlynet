/*
 * GraphIO.java Copyright (C) 2023 Daniel H. Huson
 *
 * (Some files contain contributions from other authors, who are then mentioned separately.)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package catlynet.io;

import catlynet.view.ReactionGraphView;
import catlynet.window.Document;
import jloda.graph.Edge;
import jloda.graph.Node;
import jloda.graph.io.GraphGML;
import jloda.util.FileUtils;
import jloda.util.StringUtils;

import java.io.IOException;
import java.io.Writer;
import java.util.List;
import java.util.function.BiFunction;

public class GraphIO {
	public static void write(Writer w, Document document, ReactionGraphView graphView) throws IOException {
		var graphName = FileUtils.getFileNameWithoutPathOrSuffix(document.getFileName());

		var nodeLabelNames = List.of("label", "type", "x", "y", "lx", "ly", "svg");
		BiFunction<String, Node, String> labelNodeLabelMap = (labelName, v) -> {
			var nv = graphView.getNode2view().get(v);
			return switch (labelName) {
				case "label" -> nv.getLabel().getText();
				case "type" -> v.getInfo().getClass().getSimpleName();
				case "x" -> StringUtils.removeTrailingZerosAfterDot("%.2f", nv.getShape().getTranslateX());
				case "y" -> StringUtils.removeTrailingZerosAfterDot("%.2f", nv.getShape().getTranslateY());
				case "lx" -> StringUtils.removeTrailingZerosAfterDot("%.2f", nv.getLabel().getLayoutX());
				case "ly" -> StringUtils.removeTrailingZerosAfterDot("%.2f", nv.getLabel().getLayoutY());
				default -> null;
			};
		};

		var edgeLabelNames = List.of("label", "type", "cx", "cy", "svg");
		BiFunction<String, Edge, String> labelEdgeLabelMap = (labelName, e) -> {
			var ev = graphView.getEdge2view().get(e);
			return switch (labelName) {
				case "label" -> e.getLabel();
				case "type" -> ev.getEdgeType().name();
				default -> null;
			};
		};

		GraphGML.writeGML(graphView.getReactionGraph(), "CRS network generated by CatlyNet",
				graphName, true, 1, w, nodeLabelNames, labelNodeLabelMap, edgeLabelNames, labelEdgeLabelMap);
	}
}
